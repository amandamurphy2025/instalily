{"ast":null,"code":"var _jsxFileName = \"/Users/amandamurphy/instalily_final/case-study/src/components/MarkdownRenderer.jsx\";\nimport React from 'react';\nimport { marked } from 'marked';\nimport './MarkdownRenderer.css';\n\n// Configure marked to render links with target=\"_blank\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst renderer = new marked.Renderer();\nrenderer.link = (href, title, text) => {\n  return `<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"chat-link\">${text}</a>`;\n};\nmarked.setOptions({\n  renderer,\n  breaks: true,\n  gfm: true\n});\nfunction MarkdownRenderer({\n  content\n}) {\n  if (!content) return null;\n\n  // Process content to enhance links and other formatting\n  const processedContent = content\n  // Make sure URLs are formatted as markdown links if they aren't already\n  .replace(/(?<![[(])https?:\\/\\/[^\\s\\]]+/g, url => {\n    // Skip if URL is already in a markdown link\n    if (content.includes(`[`) && content.includes(`](${url})`)) {\n      return url;\n    }\n    // Create a more user-friendly link text\n    let linkText = url;\n    try {\n      const urlObj = new URL(url);\n      linkText = urlObj.hostname.replace('www.', '');\n\n      // Add path hint \n      if (urlObj.pathname && urlObj.pathname !== '/') {\n        const pathParts = urlObj.pathname.split('/');\n        const lastPart = pathParts[pathParts.length - 1];\n        if (lastPart) {\n          linkText += `: ${decodeURIComponent(lastPart.replace(/[-_]/g, ' '))}`;\n        }\n      }\n    } catch (e) {\n      // Use full URL if parsing fails\n    }\n    return `[${linkText}](${url})`;\n  });\n\n  // Use marked to render markdown\n  const html = marked(processedContent);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"markdown-content\",\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_c = MarkdownRenderer;\nexport default MarkdownRenderer;\nvar _c;\n$RefreshReg$(_c, \"MarkdownRenderer\");","map":{"version":3,"names":["React","marked","jsxDEV","_jsxDEV","renderer","Renderer","link","href","title","text","setOptions","breaks","gfm","MarkdownRenderer","content","processedContent","replace","url","includes","linkText","urlObj","URL","hostname","pathname","pathParts","split","lastPart","length","decodeURIComponent","e","html","className","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amandamurphy/instalily_final/case-study/src/components/MarkdownRenderer.jsx"],"sourcesContent":["import React from 'react';\nimport { marked } from 'marked';\nimport './MarkdownRenderer.css';\n\n// Configure marked to render links with target=\"_blank\"\nconst renderer = new marked.Renderer();\nrenderer.link = (href, title, text) => {\n  return `<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"chat-link\">${text}</a>`;\n};\n\nmarked.setOptions({\n  renderer,\n  breaks: true,\n  gfm: true\n});\n\nfunction MarkdownRenderer({ content }) {\n  if (!content) return null;\n  \n  // Process content to enhance links and other formatting\n  const processedContent = content\n    // Make sure URLs are formatted as markdown links if they aren't already\n    .replace(\n      /(?<![[(])https?:\\/\\/[^\\s\\]]+/g, \n      url => {\n        // Skip if URL is already in a markdown link\n        if (content.includes(`[`) && content.includes(`](${url})`)) {\n          return url;\n        }\n        // Create a more user-friendly link text\n        let linkText = url;\n        try {\n          const urlObj = new URL(url);\n          linkText = urlObj.hostname.replace('www.', '');\n          \n          // Add path hint \n          if (urlObj.pathname && urlObj.pathname !== '/') {\n            const pathParts = urlObj.pathname.split('/');\n            const lastPart = pathParts[pathParts.length - 1];\n            if (lastPart) {\n              linkText += `: ${decodeURIComponent(lastPart.replace(/[-_]/g, ' '))}`;\n            }\n          }\n        } catch (e) {\n          // Use full URL if parsing fails\n        }\n        \n        return `[${linkText}](${url})`;\n      }\n    );\n  \n  // Use marked to render markdown\n  const html = marked(processedContent);\n  \n  return (\n    <div \n      className=\"markdown-content\"\n      dangerouslySetInnerHTML={{ __html: html }}\n    />\n  );\n}\n\nexport default MarkdownRenderer;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAO,wBAAwB;;AAE/B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAG,IAAIH,MAAM,CAACI,QAAQ,CAAC,CAAC;AACtCD,QAAQ,CAACE,IAAI,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,KAAK;EACrC,OAAQ,YAAWF,IAAK,iEAAgEE,IAAK,MAAK;AACpG,CAAC;AAEDR,MAAM,CAACS,UAAU,CAAC;EAChBN,QAAQ;EACRO,MAAM,EAAE,IAAI;EACZC,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,SAASC,gBAAgBA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EACrC,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;;EAEzB;EACA,MAAMC,gBAAgB,GAAGD;EACvB;EAAA,CACCE,OAAO,CACN,+BAA+B,EAC/BC,GAAG,IAAI;IACL;IACA,IAAIH,OAAO,CAACI,QAAQ,CAAE,GAAE,CAAC,IAAIJ,OAAO,CAACI,QAAQ,CAAE,KAAID,GAAI,GAAE,CAAC,EAAE;MAC1D,OAAOA,GAAG;IACZ;IACA;IACA,IAAIE,QAAQ,GAAGF,GAAG;IAClB,IAAI;MACF,MAAMG,MAAM,GAAG,IAAIC,GAAG,CAACJ,GAAG,CAAC;MAC3BE,QAAQ,GAAGC,MAAM,CAACE,QAAQ,CAACN,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;MAE9C;MACA,IAAII,MAAM,CAACG,QAAQ,IAAIH,MAAM,CAACG,QAAQ,KAAK,GAAG,EAAE;QAC9C,MAAMC,SAAS,GAAGJ,MAAM,CAACG,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC;QAC5C,MAAMC,QAAQ,GAAGF,SAAS,CAACA,SAAS,CAACG,MAAM,GAAG,CAAC,CAAC;QAChD,IAAID,QAAQ,EAAE;UACZP,QAAQ,IAAK,KAAIS,kBAAkB,CAACF,QAAQ,CAACV,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAE,EAAC;QACvE;MACF;IACF,CAAC,CAAC,OAAOa,CAAC,EAAE;MACV;IAAA;IAGF,OAAQ,IAAGV,QAAS,KAAIF,GAAI,GAAE;EAChC,CACF,CAAC;;EAEH;EACA,MAAMa,IAAI,GAAG7B,MAAM,CAACc,gBAAgB,CAAC;EAErC,oBACEZ,OAAA;IACE4B,SAAS,EAAC,kBAAkB;IAC5BC,uBAAuB,EAAE;MAAEC,MAAM,EAAEH;IAAK;EAAE;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEN;AAACC,EAAA,GA5CQzB,gBAAgB;AA8CzB,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}